!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e){var t=null;return"text"===e.type?t=document.createTextNode(e.props.textContent):function(e,t){var n=t.props;Object.keys(n).forEach((function(t){var r=n[t];"on"===t.slice(0,2)?e.addEventListener(t.slice(2).toLowerCase(),r):"value"===t||"checked"===t?e[t]=r:"children"!==t&&("className"===t?e.setAttribute("class",r):e.setAttribute(t,r))}))}(t=document.createElement(e.type,e.props.textContent),e),e.children.map((function(e){i(e,t)})),t}function o(e,t){var n=r(e);t.appendChild(n)}function c(e){return e&&"function"==typeof e.type}function u(e,t){var n=null;n=function(e){var t=e.type;return t&&c(e)&&!(t.prototype&&t.prototype.render)}(e)?function(e){return e.type(e.props||{})}(e):function(e){return(new e.type).render()}(e),c(n)?u(n,t):o(n,t)}function i(e,t){c(e)?u(e,t):o(e,t)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}n.r(t);var f={createElement:function e(t,n){for(var r,o=arguments.length,c=new Array(o>2?o-2:0),u=2;u<o;u++)c[u-2]=arguments[u];var i=(r=[]).concat.apply(r,c).reduce((function(t,n){return!0!==n&&!1!==n&&null!==n&&(n instanceof Object?t.push(n):t.push(e("text",{textContent:n}))),t}),[]);return{type:t,props:Object.assign({children:i},n),children:i}},render:function(e,t,n){n||i(e,t)},mountElement:o,Component:a((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}))};function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return m(this,n)}}function m(e,t){if(t&&("object"===p(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=document.getElementById("root"),O=(f.createElement("div",{className:"container"},f.createElement("h1",null,"hello"),f.createElement("h2",{"data-test":"test"},"(code)"),f.createElement("div",null,"qiantao ",f.createElement("div",null,"qiantao2")),f.createElement("h3",null,"(it will be change)"),!1,f.createElement("div",null,"2"),f.createElement("span",null,"this is context"),f.createElement("button",{onClick:function(){return alert("hello")}},"click me"),f.createElement("h3",null,"this element will be delete"),"2,3",f.createElement("input",{type:"text",value:"13"})),function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(c,e);var t,n,r,o=b(c);function c(){return s(this,c),o.apply(this,arguments)}return t=c,(n=[{key:"render",value:function(){return f.createElement("div",null,"render class component")}}])&&y(t.prototype,n),r&&y(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(f.Component));f.render(f.createElement(O,null),h)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,